{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Roller.svelte",
    "..\\..\\Settings.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import './../node_modules/bulma/css/bulma.css';\n  import Roller from './components/Roller.svelte';\n  import Settings from './components/Settings.svelte';\n  import Control from './components/Control.svelte';\n</script>\n\n<style>\n  main {\n    width: 90%;\n    margin: auto;\n    padding: 20px;\n    background-color: rgba(255, 255, 255, 0.8);\n  }\n</style>\n\n<main>\n  <h1 class=\"title has-text-centered\">Keep Rolling!</h1>\n  <div class=\"columns\">\n    <div class=\"column is-half is-full-tablet\">\n      <Roller />\n      <Control />\n    </div>\n    <div class=\"column is-half is-full-tablet\">\n      <Settings />\n    </div>\n  </div>\n\n</main>\n",
    "<script>\r\n  import { settings, rolling, activeItem } from './../store';\r\n  import { rollingWithProbMap, generateProbMap } from './../utils';\r\n  let rollingInterval;\r\n  let probMap = [];\r\n\r\n  settings.subscribe(setting => {\r\n    probMap = generateProbMap(setting.rollingItems);\r\n  });\r\n\r\n  rolling.subscribe(isRolling => {\r\n    if (isRolling) {\r\n      rollingInterval = setInterval(() => {\r\n        const activeIndex = rollingWithProbMap($settings.rollingItems, probMap);\r\n        activeItem.set(activeIndex);\r\n      }, 50);\r\n    } else {\r\n      clearInterval(rollingInterval);\r\n    }\r\n  });\r\n</script>\r\n\r\n<style>\r\n  .rolling-item {\r\n    max-width: 200px;\r\n  }\r\n  .card {\r\n    height: 100%;\r\n  }\r\n  .card-flex-center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n  }\r\n  .card.is-dark {\r\n    background-color: #4a4a4a;\r\n    color: white;\r\n  }\r\n</style>\r\n\r\n<div class=\"columns is-centered is-multiline is-mobile\">\r\n  {#each $settings.rollingItems as item, index (item.label)}\r\n    <div class=\"column is-one-quarter-mobile rolling-item\">\r\n      <div\r\n        class=\"card\"\r\n        class:card-flex-center={!item.imageUrl}\r\n        class:is-dark={$activeItem === index}>\r\n\r\n        {#if item.label}\r\n          <div class=\"card-content\">\r\n            <div class=\"content\">\r\n              <p class=\"is-text-medium\">{item.label}</p>\r\n            </div>\r\n          </div>\r\n        {/if}\r\n      </div>\r\n    </div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  import { settings } from './../store';\r\n\r\n  let items;\r\n  let newItem = { label: '', probability: 0 };\r\n\r\n  settings.subscribe(value => {\r\n    items = value.rollingItems;\r\n  });\r\n\r\n  function handleClickAdd() {\r\n    if (!newItem.label) {\r\n      return;\r\n    }\r\n\r\n    settings.update(settings => ({\r\n      ...settings,\r\n      rollingItems: [...settings.rollingItems, newItem],\r\n    }));\r\n    newItem = { label: '', probability: 0 };\r\n  }\r\n\r\n  function handleClickRemove(index) {\r\n    settings.update(settings => {\r\n      const newItems = [...settings.rollingItems];\r\n      newItems.splice(index, 1);\r\n      return {\r\n        ...settings,\r\n        rollingItems: newItems,\r\n      };\r\n    });\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    margin: auto;\r\n  }\r\n</style>\r\n\r\n<div class=\"wrapper\">\r\n  <div class=\"columns is-multiline\">\r\n    <div class=\"column is-full\">\r\n      <h1 class=\"title\">Items</h1>\r\n      <table\r\n        class=\"table is-bordered is-striped is-narrow is-hoverable is-fullwidth\">\r\n        <thead>\r\n          <tr>\r\n            <th>Label</th>\r\n            <th>Probability</th>\r\n            <th class=\"has-text-centered\">Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {#each items as item, index (item.label)}\r\n            <tr>\r\n              <td>{item.label}</td>\r\n              <td>{item.probability}</td>\r\n              <td class=\"has-text-centered\">\r\n                <button\r\n                  class=\"button is-small is-danger is-outlined\"\r\n                  type=\"button\"\r\n                  on:click={() => handleClickRemove(index)}>\r\n                  &times;\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          {/each}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <div class=\"column is-full\">\r\n      <h1 class=\"title\">Add New</h1>\r\n      <div class=\"columns\">\r\n        <div class=\"column\">\r\n          <input\r\n            class=\"input\"\r\n            type=\"text\"\r\n            bind:value={newItem.label}\r\n            placeholder=\"Enter a label\" />\r\n        </div>\r\n        <div class=\"column\">\r\n          <input\r\n            class=\"input\"\r\n            type=\"number\"\r\n            bind:value={newItem.probability}\r\n            placeholder=\"Enter probability weight\" />\r\n        </div>\r\n        <div class=\"column has-text-right\">\r\n          <button\r\n            class=\"button is-link is-outlined is-fullwidth\"\r\n            type=\"button\"\r\n            on:click={handleClickAdd}>\r\n            &plus; Add\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAQE,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC;ACUD,aAAa,eAAC,CAAC,AACb,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,MAAM,CAAE,IAAI,AACd,CAAC,AACD,iBAAiB,eAAC,CAAC,AACjB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,KAAK,QAAQ,eAAC,CAAC,AACb,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,AACd,CAAC;ACHD,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,AACd,CAAC"
}